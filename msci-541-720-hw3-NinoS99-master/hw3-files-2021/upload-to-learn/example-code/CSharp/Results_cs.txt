using System;
using System.Collections ;

// Author: Mark D. Smucker

public class Results
{
    public class Result : IComparable
    {
        public Result(string docID, double score, int rank)
        {
            this._docID = docID ;
            this._score = score ;
            this._rank = rank ;
        }

        private string _docID ;
        private double _score ;
        private int _rank ;

        public string docID 
        {
            get { return _docID ; }
        }
        public double score
        {
            get { return _score ; }
        }

        public int rank
        {
            get { return _rank ; }
        }

        // For IComparable, we'll sort from high to low score,
        // if the scores are the same, then we sort from high docno to low docno
        // This is what TREC eval does.  Checked on trec 9 web to work.
        // as of 10/14/2011, I think sorting from high to low docno may be 
        // backwards. 
        // OKAy, this is what trec_eval does (as far as I can tell):
        //static int
        //comp_sim_docno (ptr1, ptr2)
        //TEXT_TR *ptr1;
        //TEXT_TR *ptr2;
        //{
        //    if (ptr1->sim > ptr2->sim)
        //        return (-1);
        //    if (ptr1->sim < ptr2->sim)
        //        return (1);
        //    return (strcmp (ptr2->docno, ptr1->docno));
        //}
        // 
        // so that is a descending sort on score and docno 
        //
        public int CompareTo(object obj)
        {
            Result rhs = (Result)obj ;
            Result lhs = this ;
            int scoreCompare = -1 * lhs.score.CompareTo( rhs.score ) ;
            if ( scoreCompare == 0 )
            {
                return -1 * lhs.docID.CompareTo( rhs.docID ) ;
            }
            else
            {
                return scoreCompare ;
            }
        }
    }

    /// <summary>
    /// holds keys of queryID and docID to make sure no dupes are added
    /// </summary>
    private Hashtable tupleKeys ;
    /// <summary>
    /// keyed by queryID to an ArrayList of the queries' results.
    /// </summary>
    private Hashtable query2results ; 
    private Hashtable query2isSorted ;
    
    public Results()
    {
        this.tupleKeys = new Hashtable() ;
        this.query2results = new Hashtable() ;
        this.query2isSorted = new Hashtable() ;
    }

    public void AddResult( string queryID, string docID, double score, int rank )
    {
        // be a bit careful about catching a bad mistake
        string key = this.GenerateTupleKey( queryID, docID ) ;
        if ( this.tupleKeys.ContainsKey( key ) )
            throw new Exception( "Cannot have duplicate queryID and docID data points" ) ;
        this.tupleKeys.Add( key, null ) ;

        // Add to database
        ArrayList results = null ;
        if ( this.query2results.Contains( queryID ) )
        {
            results = (ArrayList)this.query2results[queryID] ;
        }
        else
        {
            results = new ArrayList() ;
            this.query2results.Add( queryID, results ) ;
            this.query2isSorted.Add( queryID, false ) ; 
        }
        Result result = new Result( docID, score, rank ) ;
        results.Add( result ) ;
    }

    public string GenerateTupleKey( string queryID, string docID )
    {
        return queryID + "-" + docID ;
    }

    /// <summary>
    /// Returns the results for queryID sorted by score
    /// </summary>
    /// <param name="queryID"></param>
    /// <returns></returns>
    public ICollection QueryResults( string queryID ) 
    {
        if ( ! this.query2results.ContainsKey( queryID ) )
            throw new Exception( "no such queryID in results" ) ;
        ArrayList results = (ArrayList)this.query2results[queryID] ;
        if ( ! (bool)this.query2isSorted[queryID] )
        {
            results.Sort() ;
            this.query2isSorted[queryID] = true ;
        }
        return results ;
    }

    /// <summary>
    /// returns the collection of QueryIDs 
    /// </summary>
    /// <returns></returns>
    public ICollection QueryIDs
    {
        get 
        {
            return this.query2results.Keys ;
        }
    }

    public bool QueryIDExists( string queryID )
    {
        return this.query2results.ContainsKey( queryID ) ;
    }

}
